from os.path import join
from os import listdir
import os
import re
import yaml


# configfile: "config/config.yaml"

workpath = config['workpath']
fastqdir = config['fastqpath']
workpath = os.getcwd()#os.path.dirsamplename(current_dir)
samples = [f for f in os.listdir(fastqdir) if re.search('_R1.fastq.gz', f)]
samples = [re.sub("_R1.fastq.gz", "", x) for x in samples]
print("Samples to run: ")
if len(samples) == 0:
	exit("There are NO samples to run!")
for s in samples:
	print(s)

rule all:
	params:
		batch='--time=120:00:00',
	input:		
		expand(join(workpath,"bams","{samplename}.bam"),samplename=samples),
		expand(join(workpath,"bams","{samplename}.txt"),samplename=samples),
		expand(join(workpath,"telescopeOut","{samplename}","telescope-telescope_report.tsv"),samplename=samples),
		expand(join(workpath,"doneSamples","{samplename}.txt"),samplename=samples)

rule align:
	output:
		bam=join(workpath,"bams","{samplename}.bam"),
		flag=join(workpath,"bams","{samplename}.txt")
	#conda: "workflow/envs/environment_telescope.yml"
	params:
		batch='--cpus-per-task=24 --mem=12g --time=72:00:00',
		samplename="{samplename}",
		bamdir=join(workpath,"bams"),
		fastqdir=fastqdir,
		ref=config['index']
	threads: 56
	envmodules:
		"bowtie/2-2.4.5",
		"samtools/0.1.19"
	shell: """
set -exo pipefail
bowtie2 --very-sensitive-local -k 100 -p {threads} -x {params.ref} -1 {params.fastqdir}/{params.samplename}_R1.fastq.gz -2 {params.fastqdir}/{params.samplename}_R2.fastq.gz  | \
samtools view -@ {threads} -bS -o {params.bamdir}/{params.samplename}.bam -
touch {output.flag} 
	"""


rule telescope:
	input:
		join(workpath,"bams","{samplename}.bam")
	output:
		join(workpath,"telescopeOut","{samplename}","telescope-telescope_report.tsv")
	conda: "envs/environment_telescope.yml" 
	params:
		batch='--cpus-per-task=4 --mem=128g --time=80:00:00',
		outDir=join(workpath,"telescopeOut","{samplename}"),
		sam=join(workpath,"bams","{samplename}.sam"),
		gtf = config['gtf']
	container:"docker://nciccbr/ccbr_telescope:latest"
	shell: """
if [[ ! -d {params.outDir} ]];then
mkdir -p {params.outDir}
fi
telescope assign {input} {params.gtf}  --outdir {params.outDir} 
	"""

rule clean:
	input:
		join(workpath,"telescopeOut","{samplename}","telescope-telescope_report.tsv")
	output:
		join(workpath,"doneSamples","{samplename}.txt")
	params:
		bam=join(workpath,"bams","{samplename}.bam"),
		flag=join(workpath,"bams","{samplename}.flag")
	shell: """
rm {params.bam}
rm {params.flag}
mkdir -p doneSamples
touch {output}
	"""


